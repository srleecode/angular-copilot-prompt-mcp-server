import { MarkdownFile } from './model/markdown-file.model';
import { getRelevantDocs } from './get-relevant-docs';

describe('getRelevantDocs', () => {
  const docs: MarkdownFile[] = [
    {
      id: 'readme.md0196b9a0-5b23-7488-a1b8-6cac504f2bee',
      content: 'https://github.com/modelcontextprotocol/servers/blob/main/src/filesystem/README.md\n',
      fileName: 'readme.md',
    },
    {
      id: 'example-code-reference.md0196b9a0-5b24-73a9-b0fb-4688c5877927',
      content:
        "The `overlay` package provides a way to open floating panels on the screen.\n\n### Initial setup\n\nThe CDK overlays depend on a small set of structural styles to work correctly. If you're using\nAngular Material, these styles have been included together with the theme, otherwise if you're\nusing the CDK on its own, you'll have to include the styles yourself. You can do so by importing\nthe prebuilt styles in your global stylesheet:\n\n```scss\n@import '@angular/cdk/overlay-prebuilt.css';\n```\n\n### Creating overlays\n\nCalling `overlay.create()` will return an `OverlayRef` instance. This instance is a handle for\nmanaging that specific overlay.\n\nThe `OverlayRef` _is_ a `PortalOutlet`- once created, content can be added by attaching a `Portal`.\nSee the documentation on portals for further information.\n\n```ts\nconst overlayRef = overlay.create();\nconst userProfilePortal = new ComponentPortal(UserProfile);\noverlayRef.attach(userProfilePortal);\n```\n\n### Configuring an overlay\n\nWhen creating an overlay, an optional configuration object can be provided.\n\n```ts\nconst overlayRef = overlay.create({\n  height: '400px',\n  width: '600px',\n});\n```\n\nThe full set of configuration options can be found in the API documentation.\n\n#### Position strategies\n\nThe `positionStrategy` configuration option determines how the overlay will be positioned on-screen.\nThere are two position strategies available as part of the library: `GlobalPositionStrategy` and\n`ConnectedPositionStrategy`.\n\n`GlobalPositionStrategy` is used for overlays that require a specific position in the viewport,\nunrelated to other elements. This is commonly used for modal dialogs and application-level\nnotifications.\n\n`ConnectedPositionStrategy` is used for overlays that are positioned relative to some other \"origin\"\nelement on the page. This is commonly used for menus, pickers, and tooltips. When using the\nconnected strategy, a set of preferred positions is provided; the \"best\" position will be selected\nbased on how well the overlay would fit within the viewport.\n\n`FlexibleConnectedPositionStrategy` expands upon the functionality from the\n`ConnectedPositionStrategy` by adding more advanced features on top of being able to position an\noverlay relative to another element on the page. These features include the ability to have an\noverlay become scrollable once its content reaches the viewport edge, being able to configure a\nmargin between the overlay and the viewport edge, having an overlay be pushed into the viewport if\nit doesn't fit into any of its preferred positions, as well as configuring whether the overlay's\nsize can grow while the overlay is open. The flexible position strategy also allows for the\n`transform-origin` of an element, inside the overlay, to be set based on the current position using\nthe `withTransformOriginOn`. This is useful when animating an overlay in and having the animation\noriginate from the point at which it connects with the origin.\n\nA custom position strategy can be created by implementing the `PositionStrategy` interface.\nEach `PositionStrategy` defines an `apply` method that is called whenever the overlay's position\nshould be updated. A custom position strategy can additionally expose any other APIs necessary as\nrelated to the positioning of the overlay element.\n\n#### Scroll strategies\n\nThe `scrollStrategy` configuration option determines how the overlay will react to scrolling outside\nthe overlay element. There are four scroll strategies available as part of the library.\n\n`NoopScrollStrategy` is the default option. This strategy does nothing.\n\n`CloseScrollStrategy` will automatically close the overlay when scrolling occurs.\n\n`BlockScrollStrategy` will block page scrolling while the overlay is open. Note that some\napplications may implement special or customized page scrolling; if the `BlockScrollStrategy`\nconflicts with this kind of situation, it can be overridden by re-providing `BlockScrollStrategy`\nwith a custom implementation.\n\n`RepositionScrollStrategy` will re-position the overlay element on scroll. Note that this will have\nsome performance impact on scrolling- users should weigh this cost in the context of each specific\napplication.\n\nA custom scroll strategy can be created by implementing the `ScrollStrategy` interface. Each\nstrategy will typically inject `ScrollDispatcher` (from `@angular/cdk/scrolling`) to be notified\nof when scrolling takes place. See the documentation for `ScrollDispatcher` for more information\non how scroll events are detected and dispatched.\n\n### The overlay container\n\nThe `OverlayContainer` provides a handle to the container element in which all individual overlay\nelements are rendered. By default, the overlay container is appended directly to the document body\nso that an overlay is never clipped by an `overflow: hidden` parent.\n\n#### Full-screen overlays\n\nThe `FullscreenOverlayContainer` is an alternative to `OverlayContainer` that supports correct\ndisplaying of overlay elements in\n[fullscreen mode](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen).\n\n`FullscreenOverlayContainer` can be enabled by providing it in your `NgModule`:\n\n```ts\n@NgModule({\n  providers: [{ provide: OverlayContainer, useClass: FullscreenOverlayContainer }],\n  // ...\n})\nexport class MyModule {}\n```\n",
      fileName: 'example-code-reference.md',
    },
    {
      id: 'sample.md0196b9a0-5b24-73a9-b0fb-486ca217b8cf',
      content:
        "# An h1 header\n\nParagraphs are separated by a blank line.\n\n2nd paragraph. _Italic_, **bold**, and `monospace`. Itemized lists\nlook like:\n\n- this one\n- that one\n- the other one\n\nNote that --- not considering the asterisk --- the actual text\ncontent starts at 4-columns in.\n\n> Block quotes are\n> written like so.\n>\n> They can span multiple paragraphs,\n> if you like.\n\nUse 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \"it's all\nin chapters 12--14\"). Three dots ... will be converted to an ellipsis.\nUnicode is supported. â˜º\n\n## An h2 header\n\nHere's a numbered list:\n\n1.  first item\n2.  second item\n3.  third item\n\nNote again how the actual text starts at 4 columns in (4 characters\nfrom the left side). Here's a code sample:\n\n    # Let me re-iterate ...\n    for i in 1 .. 10 { do-something(i) }\n\nAs you probably guessed, indented 4 spaces. By the way, instead of\nindenting the block, you can use delimited blocks, if you like:\n\n```\ndefine foobar() {\n    print \"Welcome to flavor country!\";\n}\n```\n\n(which makes copying & pasting easier). You can optionally mark the\ndelimited block for Pandoc to syntax highlight it:\n\n```python\nimport time\n# Quick, count to ten!\nfor i in range(10):\n    # (but not *too* quick)\n    time.sleep(0.5)\n    print i\n```\n\n### An h3 header\n\nNow a nested list:\n\n1.  First, get these ingredients:\n\n    - carrots\n    - celery\n    - lentils\n\n2.  Boil some water.\n\n3.  Dump everything in the pot and follow\n    this algorithm:\n\n        find wooden spoon\n        uncover pot\n        stir\n        cover pot\n        balance wooden spoon precariously on pot handle\n        wait 10 minutes\n        goto first step (or shut off burner when done)\n\n    Do not bump wooden spoon or it will fall.\n\nNotice again how text always lines up on 4-space indents (including\nthat last line which continues item 3 above).\n\nHere's a link to [a website](http://foo.bar), to a [local\ndoc](local-doc.html), and to a [section heading in the current\ndoc](#an-h2-header). Here's a footnote [^1].\n\n[^1]: Footnote text goes here.\n\nTables can look like this:\n\nsize material color\n\n---\n\n9 leather brown\n10 hemp canvas natural\n11 glass transparent\n\nTable: Shoes, their sizes, and what they're made of\n\n(The above is the caption for the table.) Pandoc also supports\nmulti-line tables:\n\n---\n\nkeyword text\n\n---\n\nred Sunsets, apples, and\nother red or reddish\nthings.\n\ngreen Leaves, grass, frogs\nand other things it's\nnot easy being.\n\n---\n\nA horizontal rule follows.\n\n---\n\nHere's a definition list:\n\napples\n: Good for making applesauce.\noranges\n: Citrus!\ntomatoes\n: There's no \"e\" in tomatoe.\n\nAgain, text is indented 4 spaces. (Put a blank line between each\nterm/definition pair to spread things out more.)\n\nHere's a \"line block\":\n\n| Line one\n| Line too\n| Line tree\n\nand images can be specified like so:\n\n![example image](example-image.jpg 'An exemplary image')\n\nInline math equations go in like so: $\\omega = d\\phi / dt$. Display\nmath should get its own line and be put in in double-dollarsigns:\n\n$$I = \\int \\rho R^{2} dV$$\n\nAnd note that you can backslash-escape any punctuation characters\nwhich you wish to be displayed literally, ex.: \\`foo\\`, \\*bar\\*, etc.\n",
      fileName: 'sample.md',
    },
  ];

  it('should return relevant markdown doc content', () => {
    const dir = 'test-directory';
    expect(getRelevantDocs('How do I use Overlay', docs)).toEqual<string[]>([docs[1].content]);
  });
});
